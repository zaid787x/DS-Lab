#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

int visited[MAX_VERTICES];

// Function to perform BFS traversal
void BFS(int graph[MAX_VERTICES][MAX_VERTICES], int vertices, int start) {
    int queue[MAX_VERTICES];
    int front = -1, rear = -1;

    // Mark the starting vertex as visited and enqueue it
    visited[start] = 1;
    queue[++rear] = start;

    printf("BFS Traversal Order: ");

    while (front != rear) {
        // Dequeue a vertex from the queue
        int current = queue[++front];
        printf("%d ", current);

        // Enqueue all adjacent vertices of the dequeued vertex
        for (int i = 0; i < vertices; i++) {
            if (graph[current][i] == 1 && !visited[i]) {
                visited[i] = 1;
                queue[++rear] = i;
            }
        }
    }
    printf("\n");
}

int main() {
    int graph[MAX_VERTICES][MAX_VERTICES] = {0};
    int vertices, edges, u, v;

    // Input number of vertices and edges
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    // Input edges
    for (int i = 0; i < edges; i++) {
        printf("Enter edge %d (start end): ", i + 1);
        scanf("%d %d", &u, &v);
        graph[u][v] = 1;
        graph[v][u] = 1;  // For undirected graph
    }

    // Input starting vertex for BFS traversal
    int start;
    printf("Enter the starting vertex for BFS traversal: ");
    scanf("%d", &start);

    // Initialize visited array
    for (int i = 0; i < vertices; i++) {
        visited[i] = 0;
    }

    // Perform BFS traversal
    BFS(graph, vertices, start);

    return 0;
}
