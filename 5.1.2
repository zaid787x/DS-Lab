#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a circular linked list
struct Node* createList() {
    int n, data;
    struct Node *head = NULL, *temp = NULL, *newNode = NULL;

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    if (n <= 0) {
        printf("Number of nodes should be greater than zero.\n");
        return NULL;
    }

    for (int i = 0; i < n; i++) {
        printf("Enter data for node %d: ", i + 1);
        scanf("%d", &data);

        newNode = (struct Node*)malloc(sizeof(struct Node));
        if (!newNode) {
            printf("Memory allocation failed.\n");
            return head;
        }
        newNode->data = data;
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
            newNode->next = head;
            temp = head;
        } else {
            newNode->next = head;
            temp->next = newNode;
            temp = newNode;
        }
    }
    return head;
}

// Function to display a circular linked list
void displayList(struct Node* head) {
    struct Node* temp;

    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    temp = head;
    printf("List elements: ");
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("(back to head)\n");
}

// Function to concatenate two circular linked lists
struct Node* concatenateLists(struct Node* head1, struct Node* head2) {
    struct Node *temp1, *temp2;

    if (head1 == NULL)
        return head2;
    if (head2 == NULL)
        return head1;

    temp1 = head1;
    while (temp1->next != head1)
        temp1 = temp1->next;

    temp2 = head2;
    while (temp2->next != head2)
        temp2 = temp2->next;

    temp1->next = head2;
    temp2->next = head1;

    return head1;
}

// Function to free a circular linked list
void freeList(struct Node* head) {
    struct Node *temp, *nextNode;

    if (head == NULL)
        return;

    temp = head->next;
    while (temp != head) {
        nextNode = temp->next;
        free(temp);
        temp = nextNode;
    }
    free(head);
}

// Main function with menu
int main() {
    struct Node *list1 = NULL, *list2 = NULL;
    int choice;

    do {
        printf("\n--- Circular Linked List Menu ---\n");
        printf("1. Create List 1\n");
        printf("2. Create List 2\n");
        printf("3. Display List 1\n");
        printf("4. Display List 2\n");
        printf("5. Concatenate List 2 to List 1\n");
        printf("6. Display Concatenated List\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        if (scanf("%d", &choice) != 1) {
            // Clear invalid input
            while (getchar() != '\n');
            printf("Invalid input. Please enter a number between 1 and 7.\n");
            continue;
        }

        switch (choice) {
            case 1:
                freeList(list1);
                printf("Creating List 1:\n");
                list1 = createList();
                break;
            case 2:
                freeList(list2);
                printf("Creating List 2:\n");
                list2 = createList();
                break;
            case 3:
                printf("List 1:\n");
                displayList(list1);
                break;
            case 4:
                printf("List 2:\n");
                displayList(list2);
                break;
            case 5:
                list1 = concatenateLists(list1, list2);
                list2 = NULL; // After concatenation, list2 is merged into list1
                printf("Lists have been concatenated.\n");
                break;
            case 6:
                printf("Concatenated List:\n");
                displayList(list1);
                break;
            case 7:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please select between 1 and 7.\n");
        }
    } while (choice != 7);

    // Free allocated memory
    freeList(list1);
    freeList(list2);

    return 0;
}
