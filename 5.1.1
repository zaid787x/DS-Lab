#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node
struct Node {
    int data;
    struct Node* next;
};

struct Node* head = NULL;

// Function to create a circular linked list
void createList(int n) {
    int data;
    struct Node *newNode, *temp;

    if (n <= 0) {
        printf("Number of nodes should be greater than zero.\n");
        return;
    }

    head = (struct Node*)malloc(sizeof(struct Node));
    if (!head) {
        printf("Memory allocation failed.\n");
        return;
    }

    printf("Enter data for node 1: ");
    scanf("%d", &data);
    head->data = data;
    head->next = head;
    temp = head;

    for (int i = 2; i <= n; i++) {
        newNode = (struct Node*)malloc(sizeof(struct Node));
        if (!newNode) {
            printf("Memory allocation failed.\n");
            return;
        }
        printf("Enter data for node %d: ", i);
        scanf("%d", &data);
        newNode->data = data;
        newNode->next = head;
        temp->next = newNode;
        temp = newNode;
    }
}

// Function to display the list
void displayList() {
    struct Node* temp;
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    temp = head;
    printf("Circular Linked List: ");
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("(back to head)\n");
}

// Function to insert at the beginning
void insertAtBeginning(int data) {
    struct Node *newNode, *temp;
    newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed.\n");
        return;
    }
    newNode->data = data;
    if (head == NULL) {
        newNode->next = newNode;
        head = newNode;
        return;
    }
    temp = head;
    while (temp->next != head)
        temp = temp->next;
    newNode->next = head;
    temp->next = newNode;
    head = newNode;
}

// Function to insert at the end
void insertAtEnd(int data) {
    struct Node *newNode, *temp;
    newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed.\n");
        return;
    }
    newNode->data = data;
    if (head == NULL) {
        newNode->next = newNode;
        head = newNode;
        return;
    }
    temp = head;
    while (temp->next != head)
        temp = temp->next;
    temp->next = newNode;
    newNode->next = head;
}

// Function to insert at a specific position
void insertAtPosition(int data, int position) {
    int i;
    struct Node *newNode, *temp;
    if (position < 1) {
        printf("Invalid position.\n");
        return;
    }
    if (position == 1) {
        insertAtBeginning(data);
        return;
    }
    newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed.\n");
        return;
    }
    newNode->data = data;
    temp = head;
    for (i = 1; i < position - 1 && temp->next != head; i++)
        temp = temp->next;
    if (i != position - 1) {
        printf("Position out of range.\n");
        free(newNode);
        return;
    }
    newNode->next = temp->next;
    temp->next = newNode;
}

// Function to delete from the beginning
void deleteFromBeginning() {
    struct Node *temp, *last;
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    if (head->next == head) {
        free(head);
        head = NULL;
        return;
    }
    last = head;
    while (last->next != head)
        last = last->next;
    temp = head;
    head = head->next;
    last->next = head;
    free(temp);
}

// Function to delete from the end
void deleteFromEnd() {
    struct Node *temp, *prev;
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    if (head->next == head) {
        free(head);
        head = NULL;
        return;
    }
    temp = head;
    while (temp->next != head) {
        prev = temp;
        temp = temp->next;
    }
    prev->next = head;
    free(temp);
}

// Function to delete from a specific position
void deleteFromPosition(int position) {
    int i;
    struct Node *temp, *prev;
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    if (position < 1) {
        printf("Invalid position.\n");
        return;
    }
    if (position == 1) {
        deleteFromBeginning();
        return;
    }
    temp = head;
    for (i = 1; i < position && temp->next != head; i++) {
        prev = temp;
        temp = temp->next;
    }
    if (i != position) {
        printf("Position out of range.\n");
        return;
    }
    prev->next = temp->next;
    free(temp);
}

// Function to reverse the circular linked list
void reverseList() {
    struct Node *prev, *current, *next, *last;
    if (head == NULL || head->next == head) {
        return;
    }
    prev = NULL;
    current = head;
    do {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    } while (current != head);
    head->next = prev;
    head = prev;
}

// Main function with menu
int main() {
    int choice, data, n, position;

    do {
        printf("\n--- Circular Singly Linked List Menu ---\n");
        printf("1. Create List\n");
        printf("2. Display List\n");
        printf("3. Insert at Beginning\n");
        printf("4. Insert at End\n");
        printf("5. Insert at Position\n");
        printf("6. Delete from Beginning\n");
        printf("7. Delete from End\n");
        printf("8. Delete from Position\n");
        printf("9. Reverse List\n");
        printf("10. Exit\n");
        printf("Enter your choice: ");
        if (scanf("%d", &choice) != 1) {
            // Clear invalid input
            while (getchar() != '\n');
            printf("Invalid input. Please enter a number between 1 and 10.\n");
            continue;
        }

        switch (choice) {
            case 1:
                printf("Enter the number of nodes: ");
                if (scanf("%d", &n) != 1 || n <= 0) {
                    printf("Invalid number of nodes.\n");
                    break;
                }
                createList(n);
                break;
            case 2:
                displayList();
                break;
            case 3:
                printf("Enter data to insert at beginning: ");
                if (scanf("%d", &data) != 1) {
                    printf("Invalid input.\n");
                    break;
                }
                insertAtBeginning(data);
                break;
            case 4:
                printf("Enter data to insert at end: ");
                if (scanf("%d", &data) != 1) {
                    printf("Invalid input.\n");
                    break;
                }
                insertAtEnd(data);
                break;
            case 5:
                printf("Enter position to insert: ");
                if (scanf("%d", &position) != 1 || position < 1) {
                    printf("Invalid position.\n");
                    break;
                }
                printf("Enter data to insert: ");
                if (scanf("%d", &data) != 1) {
                    printf("Invalid input.\n");
                    break;
                }
                insertAtPosition(data, position);
                break;
            case 6:
                deleteFromBeginning();
                break;
            case 7:
                deleteFromEnd();
                break;
            case 8:
                printf("Enter position to delete: ");
                if (scanf("%d", &position) != 1 || position < 1) {
                    printf("Invalid position.\n");
                    break;
                }
                deleteFromPosition(position);
                break;
            case 9:
                reverseList();
                printf("List reversed.\n");
                break;
            case 10:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please select between 1 and 10.\n");
        }
    } while (choice != 10);

    // Free allocated memory
    while (head != NULL) {
        deleteFromBeginning();
    }

    return 0;
}
